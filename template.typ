#import "@preview/tablex:0.0.9": tablex, colspanx, rowspanx, hlinex, vlinex, cellx
#import "@preview/showybox:2.0.1": showybox

#let state_course = state("course", none)
#let state_author = state("author", none)
#let state_school_id = state("school_id", none)
#let state_date = state("date", none)
#let state_theme = state("theme", none)
#let state_block_theme = state("block_theme", none)

#let _underlined_cell(content, color: black) = {
  tablex(
    align: center + horizon,
    stroke: 0pt,
    inset: 0.75em,
    map-hlines: h => {
      if (h.y > 0) {
        (..h, stroke: 0.5pt + color)
      } else {
        h
      }
    },
    columns: 1fr,
    content,
  )
}

#let fakebold(content) = {
  set text(stroke: 0.02857em) // https://gist.github.com/csimide/09b3f41e838d5c9fc688cc28d613229f
  content
}

#let asset-zju-banner = image.decode(
  format: "svg",
  width: 100%,
  "<svg version=\"1.0\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"255.1px\" height=\"80px\" viewBox=\"0 0 255.1 80\" style=\"enable-background:new 0 0 255.1 80.4;\" xml:space=\"preserve\">"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_380_\" d=\"M175.6,68.9c-2.4-0.5-1-1.3-1.4-3.3c-0.3-1.8-1.9-3.5-1.9-4.8c0.1-3.5,4.7-3.3,7.4-2.2"
    + "c0.5,0.2,1.1,0.9,1.6,1.7c1.3,1.8,2.7,4.5,0.8,6.5C180.4,68.4,177.6,69.3,175.6,68.9\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_379_\" d=\"M148.3,65.2c-0.1,0-0.2-0.1-0.2-0.1c0-0.3,0-0.5,0.1-0.8c0.7-0.3,7.3-4.5,7.3-4.7"
    + "c1.9-1.5,3.6-3.2,4.1-5.6c-4.7,1.5-9.1,4.9-14,5.3c-2.2-0.6-3.8-1.8-5.4-2.5c0-0.1,0-0.2,0-0.3c-2.6-1.7-2.8-3.8,0-4.8"
    + "c4.9,1.1,12.3-2.4,16.9-4.2c1-0.5,4-1.5,4.8-2.4c1.1-6.4,0.4-12.9,0.8-19.1c1.6-4.5,4.3-1.4,7.1,0.8c0.2,0.4,0.8,0.8,1.4,1.6"
    + "c0.1,0,0.2,0,0.3,0c1.2,1.9,1.5,2.7-0.3,4.4c-1.2,3-1.8,6.4-1.7,9.9c3.4-0.5,5.4-3.4,9.3-3.5c0.9,1.8,0.8,3.3-0.9,4.8"
    + "c-2.8,1.4-5.9,2.6-9.1,4c-0.7,3.3-2,7.2-4.3,9.9c-0.3,0.4-2,1.9-2.4,2.2c-2.1,1.2-3.9,2.7-6.2,3.3"
    + "C149.5,65.3,149.4,65,148.3,65.2\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_378_\" d=\"M88.1,76.2c-2.3-1.1-4.4-3.9-5.7-5.6c0.2-0.6,0.4-1.2,0.7-1.8C88.6,64.7,94,60.9,98.9,56"
    + "c1.5-2.3,3.5-4.7,5.1-7c0.1,0,0.2-0.1,0.3-0.1c0-0.1,0-0.2,0-0.2c1.4-1.1,2-1.4,3.2,0.4c0.1,1.5-2.6,3.1-3.4,4.5"
    + "c-1,2.7-2.2,5.4-3.6,8.1c-0.4,0.5-0.4,0.5-2.2,3.3c-1.5,1.1-3.4,4.1-4.2,5.9c-1.7,1-2.5,4-4.5,5.1C88.9,76.1,88.5,76.1,88.1,76.2"
    + "\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_377_\" d=\"M120.3,57.1c-3.4-0.1-4.3-2.3-6.2-4.3c-0.1-0.9,0.5-1.4,0.6-2c0.8-0.2,0.8-0.2,1.4-0.5"
    + "c1.4-0.2,1.9-0.1,3.4-0.2c1.9-0.4,6.9-3.9,8.6-2.4C128.3,51.7,123.9,55.9,120.3,57.1\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_376_\" d=\"M94.5,50.6c-1.3-1.1-1.5-6.3-1.6-8c1-2.9,3.9-3,6.3-1.1c1.9,2.5,3.3,3.6,1.2,6.6"
    + "C98.1,50.1,97,50.2,94.5,50.6\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_375_\" d=\"M119.4,48.1c-0.4-1.6,1.8-5,1.2-5.8c-0.8,0.1-1.6,0.4-2.5,0.5c-2-1-4.2-3.4-3.4-5.3"
    + "c1.5-1.7,0.9-1.3,3.3-1.4c2.2-1,4.4-2,6.7-2.9c3.8-0.7,5.5,1.4,5.7,5.1c-0.7,2.4-2.3,4.3-3.8,6.2c-2,1.1-3.8,2.3-5.6,3.5"
    + "C120.4,47.9,119.9,48,119.4,48.1\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_374_\" d=\"M98.7,37.4c-0.8-0.7-0.5-1.1,0-1.8c-0.1-1.6-1-2.8-1.1-4.3c0.5-2.7,0-3.7,2.3-5.1"
    + "c1.8,0.8,7.9,3.9,6.5,7.4C104.6,35.7,101.2,37.1,98.7,37.4\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_373_\" d=\"M19.1,78.7c-3.7-1.4-6.9-8.6-2.4-10.4c0.1-0.6,0.7-1.3,1.2-1.5c0-0.1,0-0.2,0-0.3"
    + "c3.5-3.4,5.9-8.2,8.9-12c0.8-1.4,1.2-2.8,2.8-3.2c0.8,0.7,0.5,2.4,0.3,3.6c0.4,0.3,1.6,0.1,2.4-0.2c2.5-2.1,5.7-4,8.1-6.2"
    + "c0.1-1.1,0.3-2.2,0.4-3.2c-1.7,0.4-7.4,1.7-6-1.4c2.1-0.8,5.3-2.7,6.5-4.9c0.6-2.3,0.2-4.9,1.4-6.6c2.4-1.2,5.2,1.8,5.7,4.3"
    + "c1,1.7,3.9-0.4,0.2,4.8c-0.8,0.6-0.7,1.7-0.6,2.9c0.3,0,0.5,0,0.8,0.1c2.1-1.5,4.3-3.1,6.7-4.5c0.6-3.3,1.2-6.1,2.8-8.9"
    + "c2.3-1.6,5.4,0.1,7.7,1.9c1.7-0.1,2.8-0.8,4.4-2c0.6-0.2,0.6-0.2,1.8-0.2c0.5,0.8,0.6,1.7,0.7,2.9c-1.1,3.4-10.8,4.5-9,8.5"
    + "c1.7-0.1,2.3-2,2.9-3.2c1.9-1,6,0.2,8,1.7c2.2,2.7,0.5,3.6-2,5.3c-0.2,0.4-0.5,0.7-0.7,1.1c-0.2,5.4-0.2,5.4-0.1,12.8"
    + "c-0.8,2-1.4,3-3,4.6c0,0.1,0,0.2,0,0.2c-0.1,0-0.2,0-0.3,0c-0.9,1.6-3.2,3.3-4.6,1.7c0-6,0.3-12.3,0.1-18.1"
    + "c-0.1,0-0.2,0.1-0.3,0.1c-0.4,2.9-3.4,8.5-5.9,10.3c-2.3,0.1-4.3-1.2-4.9-3.2c0.2-0.6,0.7-0.7,1.2-1.2c1.3-2.7,0.9-7.6,0.9-10.3"
    + "c-1.9,0.3-5.1,4.5-6.5,6.1c-1,0.8-1.9,1.5-2.8,2.3c-0.7,2.2-1.2,4.5-1.8,6.9c-0.5,1.1-1,2.2-1.5,3.3c-0.1,0-0.2,0-0.3,0"
    + "c-0.9,1.5-3.7,5.4-5.4,2.9c0-0.3,0-0.7,0-1c1.4-2.1,2.5-5,2.6-7.4c-2.3,0.8-3.9,2.9-6.2,3c-1.3-0.3-2.7-0.7-3.6-1.1"
    + "c0-0.1,0-0.2,0-0.3c-0.6-0.4-1.1-0.9-1.5-0.7c-0.4,1.3-0.8,2.7-1.2,4c-2.4,5-4.1,9.9-5.7,15.4C20.3,78.4,20,78.5,19.1,78.7\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_372_\" d=\"M23.6,50c-0.7-1,0.2-2.4,0.2-3.6c-1.1-3.4-2-6,0.1-8.8c0.3-0.1,0.7-0.1,1-0.1"
    + "c1.6,1.1,3.8,3.6,5.2,5.5C31.9,46.9,26.6,48.8,23.6,50\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_371_\" d=\"M26.9,36.7c-0.9-0.3-0.8-0.5-1-0.8c0.4-0.8,0.8-1.3,0.6-2.2c-2.1-3.2-2-8.1,1.6-9.7"
    + "c1.1,0.1,1.1,1,1.5,2.5c2.4,2.3,6.7,5.1,2.6,8.2C30.6,35.5,28.7,36.1,26.9,36.7\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_370_\" d=\"M201.6,49.3c-3.3-1-2.7-6.4-2.1-8.6c2.4-1.5,5.5,1.6,5.7,4.5"
    + "C204.6,48.2,204.6,48.7,201.6,49.3\" />"
    + "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" id=\"XMLID_367_\" d=\"M219.3,74.1c-0.1-0.1-0.2-0.1-0.3-0.2c-4.2,0.3-8.2-0.1-11.9-1.5c-0.2-0.3-0.2-0.3-0.2-0.8"
    + "c2.2-1.3,5.3-0.9,7-3.3c0.3-1.8,0.5-3.4,0.3-4.9c-4.2,0.3-6.4,3.2-9.7,4.4c-2.8,0.2-7.8-2.4-8.7-4.6c0-3.6,0.8-2,4.6-2.2"
    + "c4.6-0.8,9.2-3.5,13.7-5.4c0.9-0.7,0.9-0.7,1.5-0.9c1-3,1.7-3.5,4.8-4.2c1.2-0.6,1.2-0.6,4.8-2.8c0.1-0.3,0.2-0.7,0.3-1.1"
    + "c-5.4,0.6-9.8,5-14.1,7.9c-2.1,0.6-3.8,0.2-5.3-0.4c-1,0.1-6.4,1.1-3.7-1.1c1.6-0.6,2.8-1.8,4.5-2.5c4.1-2.7,8.8-5.1,13.2-7.6"
    + "c0-0.7-0.3-1.1-0.4-1.2c0-0.9,0.2-1.4,0.4-2.1c-0.8,0.3-1.1,0.2-1.2,0.8c-2.6,1.2-3.7,3.5-5.9,1c-0.6,2.3-2.2,3.9-4.5,4"
    + "c-2.3-1.2-2.4-5.1-2.8-6.9c-0.2-0.2-0.5-1.7-1.1-3.5c-1.1-2.1-3-4.5-1.7-6.5c1.7-1,2.3-1.4,3.7,0.8c1.2,0.9,2.7,2.2,3.9,3.8"
    + "c0.1,0,0.2,0,0.3,0c0.7,2,2.5,4.6,2.4,7.1c1.2-0.7,3-2.1,2.1-3.7c-2-1.1-0.9-3,0.5-3.7c1,0.1,1,0.1,2.3-0.1"
    + "c0-0.5-0.1-0.5-0.3-0.8c-1.7-0.6-1.4-1-0.9-2.3c-2-0.7-2.7-2.8-1.9-4.2c5.7-1.4,5.7-1.4,8.3-2.3c1.8-2.2,3.7-8.2,7.1-7.1"
    + "c1.1,1.3,1.8,3.4,1.6,5.5c-0.4,0.9-1,1.7-1.2,2.7c0.3,0,0.7,0,1,0c2.4-1.2,3.5-2.6,4.9,1c2.3,1.2,3.1,0.9,2.3,4.3"
    + "c-1.7,3.3-3.5,6.9-5.3,10.3c0,0.2-0.1,0.3,0,0.5c0.4,0.1,0.9,0.2,1.3,0.3c0.2,1.5,0.3,3.4,0.2,5.2c-1.4,2.1-3.2,2.1-5.5,2.4"
    + "c-2.9,1.4-5.5,2.6-8.2,4.3c0,0.5-0.1,1.1,0.2,1.8c1.4,0,2.8-0.1,4.2-0.1c1.6,1,1.4,3.8,0.5,5.5c-1.6,0.2-2.5,0.4-3.8,1.1"
    + "c-0.1,0.8-0.3,1.5-0.4,2.4C222.2,66.1,223.8,73.4,219.3,74.1 M228.2,37c1.4-1.4,2.4-2.8,2.3-4.8c-1.2-1-3.2-1.2-4.4-1.1"
    + "c-0.2,0.5-0.2,0.5-1.6,3.2c0.1,0.1,0.3,0.1,0.4,0.2c-0.1,0-0.3,0.1-0.4,0.2c0,0.1,0.1,0.1,0.1,0.3c0.6,0.1,1-0.4,1.2-0.8"
    + "c2.2-0.4,2.2,0.4,2.1,2.8C228,36.9,228.1,36.9,228.2,37\" />"
    + "</svg>",
)
#let asset-zju-logo = image.decode(
  format: "svg",
  width: 100%,
  "<svg width=\"88\" height=\"88\" viewBox=\"0 0 88 88\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\">"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M44 0C68.2346 0 88 19.7654 88 43.9994C88 68.234 68.2346 87.9994 44 87.9994C19.766 87.9994 0 68.234 0 43.9994C0 19.7654 19.766 0 44 0ZM44 1.75339C20.7315 1.75339 1.75339 20.7309 1.75339 43.9994C1.75339 67.2685 20.7315 86.246 44 86.246C67.2691 86.246 86.2472 67.2685 86.2472 43.9994C86.2472 20.7309 67.2691 1.75339 44 1.75339Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28.5451 62.7523C25.7902 60.4773 23.5413 57.6076 21.9978 54.3423C20.512 51.1994 19.6806 47.6919 19.6806 43.9995C19.6806 30.6063 30.6052 19.6817 43.9997 19.6817C57.3935 19.6817 68.3181 30.6063 68.3181 43.9995C68.3181 47.6919 67.4861 51.2 66.0009 54.3423C64.458 57.6076 62.2091 60.4773 59.4536 62.7523L58.896 62.078C61.5535 59.8825 63.7229 57.1152 65.2105 53.9691C66.641 50.9423 67.442 47.5622 67.442 43.9989C67.442 31.0881 56.9117 20.5572 44.0003 20.5572C31.0882 20.5572 20.5579 31.0881 20.5579 43.9989C20.5579 47.5616 21.3589 50.9423 22.7894 53.9691C24.2765 57.1146 26.4458 59.8819 29.1033 62.078L28.5451 62.7523Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M44.1474 66.4569L39.1672 58.8578C40.6965 58.0705 40.5071 55.6155 39.197 55.4113C37.7385 55.1828 36.5775 55.1126 35.5542 52.8197H37.9267L37.1984 50.831C34.4838 51.0694 33.93 50.315 32.6429 48.1947L36.0336 48.0786L35.3481 46.3481C31.6532 46.5195 30.6784 45.6136 29.7558 43.5082L34.061 43.3573L33.129 41.2984C28.7201 41.4214 27.7869 41.2966 26.1701 38.3151L31.647 38.2884L30.8746 36.327C25.8826 36.5424 24.6359 36.0538 23.2227 33.5572L34.4435 33.2734C36.0789 33.2318 37.9459 34.3463 38.6339 35.8296L39.9831 38.741L41.403 33.8409C42.1351 31.3164 47.6523 32.2316 49.428 33.9117L46.0907 35.1187L47.7237 39.0949C48.9071 36.3257 50.3569 33.2722 53.4762 33.2722H64.484C63.6371 35.7042 61.5925 36.9168 57.1482 36.1301L56.3671 38.189L61.8564 38.1723C60.5426 41.2351 59.0847 41.6201 55.0018 41.1556L54.1493 43.2145L58.5191 43.3567C57.6784 45.2976 56.1566 46.458 52.7833 46.0545L52.073 48.0593L55.5525 48.0432C54.5553 50.482 53.9115 51.0265 50.74 50.8837L50.0129 52.8718L52.5194 52.8811C51.4658 55.004 51.1535 55.256 48.9046 55.4554C47.5678 55.5739 46.9718 57.7141 48.7519 58.9826L44.1474 66.4569Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.32121 58.6865L4.66219 54.2347L5.56869 53.9193L13.1733 55.0791L12.0098 51.9567L12.9163 51.6413L14.435 55.718L13.5291 56.0341L5.92446 54.8761L7.22708 58.3711L6.32121 58.6865Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.21716 64.7576L8.75895 63.8679L12.3359 62.0282L11.2015 59.8222L7.62458 61.6613L7.16636 60.7728L14.8126 56.8401L15.2708 57.7298L12.0503 59.3851L13.1853 61.5917L16.4058 59.9352L16.8628 60.8255L9.21716 64.7576Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.8439 69.6013L10.1275 65.8076L17.2988 61.354L19.8829 64.9626L19.0863 65.4574L17.1144 62.7038L14.8903 64.0853L16.7021 66.6148L15.9061 67.1096L14.0944 64.5795L11.5357 66.169L13.6405 69.1077L12.8439 69.6013Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.9378 75.5643L18.0275 74.7963L23.3057 68.3117L24.2166 69.0804L18.9378 75.5643Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M23.0256 78.4209L24.1072 76.1218L22.7965 75.1724L20.845 77.0724L19.954 76.3838L26.1412 70.2699L27.3824 71.0268L24.0867 79.0182L23.0256 78.4209ZM24.6064 74.9974L25.8966 72.0345L25.7774 71.937L23.5465 74.2063L24.6064 74.9974Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M29.2279 81.4186L28.1103 80.8989L28.7622 74.9328L26.3184 79.9483L25.2033 79.4355L29.0813 71.7557L30.0884 72.2226L29.6203 77.8907L32.1411 73.2104L33.0793 73.6004L29.2279 81.4186Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M35.0022 83.141L34.2814 82.9057L34.3478 82.2302C34.1796 82.3748 33.9554 82.4673 33.6773 82.5089C33.3985 82.5518 33.1197 82.5263 32.8366 82.4344C32.2405 82.2407 31.8003 81.7732 31.5159 81.0319C31.2303 80.2905 31.2868 79.2704 31.6867 77.9715C32.1244 76.5534 32.6621 75.5655 33.3016 75.0092C33.9399 74.4548 34.911 74.1449 35.7697 74.42C36.6942 74.7149 37.2939 75.8518 37.0282 77.4251L35.9243 77.3344C36.1149 76.6608 36.018 75.6096 35.3599 75.3954C34.8265 75.2222 34.2286 75.3861 33.8486 75.8108C33.468 76.2361 33.098 77.0364 32.7347 78.2149C32.3908 79.3319 32.2952 80.1471 32.4473 80.6624C32.5994 81.1778 32.8614 81.495 33.2284 81.6149C33.5965 81.7347 33.9306 81.6863 34.2317 81.4677C34.5316 81.251 34.7762 80.8388 34.9619 80.2365L35.1159 79.7379L33.7996 79.3089L34.0647 78.4489L36.2304 79.1555L35.0022 83.141Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M46.4407 81.2464C46.4158 82.0207 46.2084 82.6273 45.821 83.0657C45.4329 83.504 44.8344 83.7064 44.0266 83.676C43.2195 83.6456 42.6352 83.3984 42.277 82.9322C41.9187 82.4652 41.7504 81.845 41.7759 81.0707L41.9653 75.2126L42.9972 75.2511L42.8078 81.1092C42.7898 81.6581 42.8972 82.066 43.1282 82.333C43.3592 82.6006 43.669 82.7422 44.0571 82.7577C44.4457 82.7714 44.7636 82.6534 45.0114 82.4044C45.2585 82.1554 45.392 81.7574 45.41 81.208L45.6 75.3499L46.6313 75.3884L46.4407 81.2464Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M52.3104 82.8106L51.3902 82.9497L48.4894 77.3592L48.9327 83.3613L47.8394 83.5178L47.1973 75.1016L48.4559 74.9849L50.8482 78.9064L50.4043 74.6856L51.3176 74.5291L52.3104 82.8106Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M55.4542 81.9291L54.3751 82.2563L52.1318 74.2903L53.2109 73.963L55.4542 81.9291Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M58.3652 71.834L59.7293 80.6289L58.6651 81.1535L54.0065 73.6886L55.0316 73.257L58.2696 78.3471L57.3718 72.2661L58.3652 71.834Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M67.0173 76.8192L63.0858 78.9445L58.8054 71.5944L62.5444 69.574L63.02 70.3898L60.167 71.9315L61.4945 74.2108L64.1153 72.7945L64.5909 73.6104L61.9689 75.0273L63.4963 77.6493L66.5423 76.0033L67.0173 76.8192Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M71.4962 73.6787L70.6313 74.4176L67.5845 71.8937L66.7966 72.6071L68.8555 75.4073L67.9912 76.3125L62.9484 69.2331L64.5558 68.082C65.0699 67.7132 65.7455 67.45 66.3539 67.5226C67.9242 67.7095 68.5954 68.7675 68.5233 69.9975C68.501 70.3855 68.4786 70.7636 68.3265 71.1486L71.4962 73.6787ZM66.0621 68.6917C65.422 68.5173 64.9178 69.0121 64.4571 69.3722L66.1329 71.5851C66.6451 71.2163 66.8836 71.1362 67.271 70.4681C67.4386 69.6647 67.0798 68.9699 66.0621 68.6917Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M74.2164 66.8431C75.9741 67.8992 75.5643 70.8956 73.254 71.2458C72.6325 71.3395 71.9017 71.152 71.5875 70.9533L71.9824 70.0568C72.363 70.1418 72.7486 70.2791 73.1137 70.2101C74.6106 69.9251 74.5448 68.3698 73.6719 67.7253C73.3676 67.5006 72.9324 67.472 72.5723 67.5117C71.5621 67.6247 70.9151 68.3785 69.7913 68.4487C68.5626 68.5263 67.707 67.7769 67.5064 66.581C67.4003 65.9471 67.5518 65.3324 67.8666 64.8388C68.5166 63.8212 69.8962 63.6833 70.9015 64.2763L70.5103 65.2008C69.967 64.9121 69.0022 64.9133 68.6389 65.4814C68.4496 65.7788 68.3838 66.0831 68.4409 66.3929C68.5669 67.0678 69.0282 67.4596 69.6783 67.3814C70.7692 67.2485 71.5068 66.3513 72.5803 66.3861C73.0919 66.4035 73.6986 66.532 74.2164 66.8431Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M77.924 65.7511L77.2907 66.5278L70.0431 61.9835L70.6764 61.2068L77.924 65.7511Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M74.2656 56.5837L73.4634 58.0701L80.3088 62.0953L79.8474 62.9503L73.0027 58.9244L72.2006 60.4109L71.3456 59.9079L73.4107 56.0808L74.2656 56.5837Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M75.5216 50.9291L79.6965 54.6606L82.4843 55.854L82.1447 56.794L79.5618 55.7944L73.6155 55.6565L73.9011 54.7041L78.0505 54.7712L75.1125 52.0678L75.5216 50.9291Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.2984 71.8195C17.5601 72.5546 16.8703 72.9346 16.2308 72.9557C15.5913 72.9774 15.0126 72.7235 14.4917 72.1926C14.0173 71.7102 13.7826 71.1477 13.7882 70.5044C13.7907 70.1784 13.8857 69.8432 14.0714 69.4986L15.0114 70.0729C14.9313 70.2362 14.8891 70.3914 14.8853 70.5398C14.876 70.89 14.9841 71.1818 15.2094 71.4121C15.5267 71.735 15.8595 71.8803 16.2078 71.8511C16.5568 71.8219 16.9808 71.5593 17.4819 71.0613L21.6611 66.9237L22.4409 67.7178L18.2984 71.8195Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M32.5187 70.3704L29.5887 68.5525L29.8545 68.0924L30.9423 68.7685L32.6851 65.7348L31.5961 65.0587L31.8333 64.647C32.2455 64.9022 32.5734 65.0475 32.8192 65.0786C33.0632 65.1096 33.2694 65.0134 33.4358 64.783L34.0604 65.1692L31.7196 69.2479L32.7832 69.9072L32.5187 70.3704ZM41.2559 68.5183C41.3025 68.2855 41.2217 68.075 41.0125 67.8844C40.8008 67.6969 40.4816 67.5721 40.0526 67.5125C39.659 67.4585 39.3255 67.4839 39.0468 67.5888C38.7667 67.6913 38.6035 67.8614 38.555 68.0998C38.5196 68.273 38.555 68.4264 38.6587 68.563C38.7612 68.6996 38.9313 68.8331 39.1672 68.9635C39.2722 69.0175 39.4299 69.0976 39.6459 69.1994C39.8601 69.2988 40.0563 69.3844 40.237 69.449C40.5822 69.3385 40.8262 69.205 40.9728 69.0603C41.1181 68.9101 41.2131 68.7288 41.2559 68.5183ZM40.8753 71.1428C40.9194 70.9267 40.8883 70.751 40.7859 70.6064C40.6797 70.4617 40.4562 70.2996 40.1116 70.1177C39.998 70.0581 39.8446 69.9873 39.6528 69.9079C39.4597 69.8278 39.2423 69.7346 39.0008 69.6297C38.6773 69.7179 38.4159 69.8427 38.2197 70.0072C38.0223 70.1717 37.9 70.3766 37.8522 70.6151C37.7882 70.9305 37.8832 71.2055 38.1347 71.4533C38.3861 71.6979 38.7338 71.8544 39.1772 71.9133C39.6304 71.9785 40.011 71.9388 40.319 71.8022C40.6294 71.6631 40.8144 71.4439 40.8753 71.1428ZM39.0592 72.4324C38.66 72.3753 38.3036 72.2877 37.9913 72.1654C37.6789 72.0431 37.4231 71.8953 37.2214 71.7165C37.0239 71.5464 36.8861 71.3583 36.8078 71.1484C36.7296 70.941 36.7128 70.7305 36.7551 70.5145C36.8134 70.2332 36.9811 69.9917 37.2623 69.7874C37.5417 69.5831 37.9167 69.4434 38.388 69.364L38.3923 69.3441C38.026 69.1398 37.7665 68.938 37.61 68.7337C37.4567 68.5295 37.4058 68.296 37.4598 68.0322C37.5392 67.6373 37.8348 67.3448 38.3433 67.1486C38.8543 66.9499 39.4609 66.9015 40.1625 66.9984C40.8958 67.1002 41.4564 67.3051 41.8457 67.6174C42.2363 67.9241 42.3921 68.2737 42.3145 68.6568C42.2673 68.8902 42.1158 69.1063 41.8588 69.3044C41.5999 69.503 41.2609 69.6396 40.8374 69.7104L40.8343 69.7334C41.2733 69.9408 41.5943 70.1618 41.7942 70.3977C41.996 70.6337 42.0624 70.9118 41.9972 71.2272C41.9066 71.673 41.5825 72.0114 41.0218 72.2412C40.4618 72.4721 39.8074 72.538 39.0592 72.4324ZM49.1946 69.2199C49.1946 68.8623 49.1449 68.5692 49.0474 68.3451C48.9481 68.1209 48.8115 67.9471 48.637 67.8254C48.4837 67.7112 48.326 67.6317 48.167 67.5894C48.0075 67.5497 47.833 67.5267 47.6411 67.5267C47.2065 67.5267 46.8601 67.6317 46.603 67.8391C46.3428 68.0464 46.2149 68.3445 46.2149 68.7393C46.2149 68.9635 46.2559 69.1423 46.3416 69.2876C46.4267 69.4323 46.5639 69.5577 46.7576 69.6601C46.8899 69.7309 47.0432 69.7818 47.2121 69.8079C47.3804 69.8334 47.5635 69.8451 47.7572 69.8451C47.9826 69.8451 48.2291 69.8166 48.4886 69.7651C48.7519 69.711 48.9785 69.6403 49.1735 69.5552C49.1778 69.5179 49.184 69.4726 49.1878 69.413C49.1934 69.3565 49.1946 69.2938 49.1946 69.2199ZM45.1389 68.7685C45.1389 68.496 45.2054 68.2488 45.3358 68.0272C45.4699 67.8006 45.6499 67.6068 45.8815 67.4448C46.0988 67.2883 46.3671 67.1697 46.6856 67.0809C47.0022 66.9928 47.3214 66.9506 47.6486 66.9506C48.0118 66.9506 48.3415 66.9903 48.6358 67.0723C48.9313 67.1523 49.1865 67.2709 49.402 67.4243C49.6745 67.618 49.885 67.8707 50.0359 68.183C50.1849 68.4984 50.2613 68.8933 50.2613 69.3733C50.2613 69.8079 50.188 70.2226 50.0402 70.6113C49.8943 71.0037 49.6795 71.3272 49.3927 71.5824C49.089 71.855 48.724 72.0655 48.2974 72.2076C47.8702 72.3523 47.3443 72.4237 46.7179 72.4237C46.5775 72.4237 46.4267 72.4206 46.2677 72.41C46.1088 72.3983 45.9598 72.3784 45.8213 72.3498V71.6737H45.8753C45.9641 71.7084 46.1013 71.742 46.2901 71.7705C46.4763 71.8016 46.6676 71.8159 46.8613 71.8159C47.5542 71.8159 48.0993 71.665 48.4949 71.3614C48.891 71.0546 49.1151 70.62 49.1679 70.055C48.8854 70.1829 48.6166 70.2767 48.3607 70.3363C48.1025 70.3959 47.8243 70.4244 47.5244 70.4244C47.2301 70.4244 46.965 70.4021 46.7235 70.3592C46.4832 70.317 46.2404 70.2345 45.9976 70.1128C45.7133 69.9681 45.5003 69.7862 45.3556 69.567C45.211 69.3447 45.1389 69.0808 45.1389 68.7685ZM56.6254 64.2664L56.4323 69.6974L55.5997 70.2233L55.6736 65.0879L52.5008 66.6271L52.2214 66.0167L56.2107 63.9461L56.6254 64.2664Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M60.6148 22.732C60.0287 22.3384 60.4906 22.2881 60.6086 21.6989C60.7098 21.1929 60.4664 20.5577 60.6191 20.2125C61.032 19.2818 62.221 19.8244 62.8345 20.4186C62.9438 20.5242 63.0189 20.7843 63.076 21.0333C63.2176 21.6529 63.3331 22.516 62.5973 22.8419C61.9627 23.1238 61.1245 23.0748 60.6148 22.732Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.7084 18.8341C53.691 18.8173 53.673 18.7999 53.6556 18.7832C53.6891 18.7136 53.722 18.6435 53.7525 18.5845C53.9828 18.5882 56.1832 18.1443 56.1988 18.0959C56.8693 17.8953 57.5045 17.6258 57.9099 17.0316C56.4949 16.9404 54.9464 17.38 53.6121 16.959C53.0701 16.5703 52.7895 16.0804 52.4411 15.7303C52.4517 15.6992 52.4573 15.6781 52.4641 15.6576C51.9587 14.9368 52.1251 14.3357 52.9794 14.3873C54.1678 15.1982 56.5365 15.0634 57.9509 15.0858C58.275 15.0734 59.1815 15.1075 59.4969 14.9436C60.473 13.338 60.9734 11.5362 61.7321 9.93053C62.6281 8.9073 63.1118 10.0851 63.5451 10.9035C63.6004 11.0078 63.6817 11.199 63.7407 11.4815C63.7618 11.4883 63.9251 12.3874 63.2552 12.6575C62.6057 13.3355 62.0904 14.17 61.757 15.1187C62.7038 15.3484 63.5588 14.7822 64.6025 15.1802C64.6602 15.7601 64.4659 16.1568 63.8469 16.3747C62.946 16.4344 61.996 16.4319 60.984 16.4797C60.4363 17.2688 59.6658 18.1952 58.7724 18.6578C58.642 18.7254 58.0347 18.9601 57.9031 18.98C57.2183 19.0812 56.562 19.2755 55.8846 19.2017C54.0163 18.998 54.0269 18.9117 53.7084 18.8341Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M31.683 21.8747C30.9125 21.7362 30.0718 21.07 29.5658 20.6497C29.58 20.4491 29.5949 20.2486 29.6235 20.0555C30.9255 18.4188 32.235 16.8722 33.3234 15.0412C33.5891 14.2408 33.9828 13.3747 34.2833 12.5737C34.3007 12.557 34.3423 12.4738 34.3354 12.4533C34.6658 12.0224 34.8179 11.892 35.3071 12.3291C35.4506 12.765 34.7378 13.4374 34.6372 13.9298C34.4621 14.7928 34.0002 16.9665 33.6785 17.7936C33.473 18.3213 32.5945 21.2525 32.0605 21.7275C31.9251 21.7716 31.8034 21.8231 31.683 21.8747Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M39.7597 13.6939C38.7501 13.9118 38.2993 13.3462 37.6027 12.9078C37.517 12.6483 37.6356 12.4484 37.6083 12.2615C37.8436 12.1385 38.5328 11.8194 38.9792 11.6729C39.5194 11.3916 40.727 9.99275 41.3343 10.2995C41.7273 11.4941 40.7264 13.0655 39.7597 13.6939Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M31.5859 13.7838C31.1165 13.5466 30.639 12.0248 30.4813 11.5467C30.5403 10.6067 31.3984 10.3472 32.2676 10.7172C33.0431 11.3251 33.5156 11.5374 33.1449 12.5799C32.6172 13.3523 32.3229 13.4721 31.5859 13.7838Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M38.7914 11.1022C38.5648 10.6589 38.9498 9.48538 38.7014 9.29104C38.4692 9.39038 38.2444 9.54498 37.9948 9.62694C37.3181 9.49283 36.4668 8.93341 36.5587 8.30444C36.8723 7.68355 36.7332 7.85554 37.4187 7.63078C38.0011 7.16263 38.5866 6.70565 39.1832 6.24495C40.2493 5.74389 40.9248 6.22384 41.28 7.30357C41.2669 8.06664 40.9391 8.75024 40.6218 9.43012C40.1121 9.90882 39.6675 10.4111 39.2199 10.9035C39.0684 10.965 38.9299 11.0333 38.7914 11.1022Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M31.8301 9.52709C31.5401 9.38118 31.6103 9.24334 31.6798 9.00119C31.5296 8.54484 31.1539 8.24247 31.0105 7.80598C30.9478 6.95226 30.7143 6.69583 31.2868 6.12772C31.8704 6.22333 33.9423 6.68093 33.7753 7.81716C33.4407 8.58272 32.5329 9.24955 31.8301 9.52709Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.7371 40.2878C16.8529 40.9503 15.0921 40.5288 14.8177 39.3342C14.6239 38.4904 13.5529 36.1136 13.0953 34.8308C12.865 34.431 12.5973 34.123 12.7457 33.6692C13.0425 33.5816 13.3927 33.8976 13.6578 34.1417C13.7913 34.1032 13.9981 33.7716 13.9819 33.5468C13.9155 32.6112 13.8807 31.5873 13.7131 30.6622C13.4703 30.4679 13.2282 30.2729 13.0003 30.0742C12.842 30.5486 12.3068 32.0989 11.7486 31.2967C11.869 30.6647 11.9162 29.6203 11.5418 29.0057C11.07 28.5245 10.4062 28.2122 10.1852 27.6807C10.2467 26.93 11.3885 26.7065 12.0739 26.9803C12.6209 27.0045 12.5688 25.9807 13.253 27.6484C13.2772 27.9228 13.5504 28.0843 13.8584 28.2277C13.9043 28.1656 13.9509 28.1035 13.9975 28.0414C13.9546 27.3212 13.9093 26.537 13.9416 25.7708C13.2412 25.1145 12.6538 24.57 12.223 23.7629C12.1925 22.9743 13.0705 22.4826 13.8385 22.2168C14.0738 21.7853 14.0626 21.4178 14.0235 20.8739C14.0689 20.6994 14.0689 20.6994 14.2452 20.4218C14.514 20.4312 14.7407 20.5175 15.0474 20.6851C15.6943 21.4612 14.4954 23.9572 15.7229 24.1031C15.9533 23.6809 15.5962 23.2624 15.3932 22.9271C15.4392 22.318 16.3481 21.5183 16.9976 21.2625C17.9755 21.1365 17.9364 21.6878 17.9743 22.5298C18.0245 22.6446 18.0736 22.7583 18.1289 22.8632C19.4042 23.7206 19.4042 23.7206 21.1743 24.8109C21.7244 25.2847 21.784 26.0695 21.8399 26.3066C21.8753 26.4569 22.1317 27.5739 21.5562 27.6707C20.1064 26.768 18.661 25.7435 17.2528 24.9252C17.2373 24.9537 17.231 24.9879 17.2298 25.0121C17.8656 25.5585 18.7448 27.0958 18.8013 27.9737C18.4871 28.5493 17.8718 28.8113 17.2993 28.6735C17.1919 28.5276 17.2261 28.3972 17.1981 28.2202C16.7542 27.505 15.5155 26.8543 14.8841 26.46C14.6662 26.9511 15.2076 28.3543 15.3777 28.9324C15.4143 29.2764 15.451 29.6191 15.4926 29.9538C15.9297 30.4542 16.3779 30.9099 16.8635 31.4116C17.0442 31.6966 17.2342 31.9872 17.4241 32.2777C17.4086 32.3069 17.3981 32.3256 17.3875 32.3448C17.6117 32.7782 18.114 34.0479 17.2714 34.087C17.1851 34.0398 17.1081 33.9976 17.0367 33.9461C16.7474 33.2898 16.2097 32.5869 15.641 32.2138C15.4752 32.8831 15.7366 33.5928 15.4348 34.1429C15.2504 34.48 14.8878 34.6489 14.6301 34.7563C14.357 34.8706 14.1837 34.9296 14.1657 35.0314C14.4141 35.3288 14.6984 35.6101 14.9356 35.9242C15.8794 37.1741 16.6809 38.4072 17.7582 39.6049C17.8377 39.9439 17.8246 40.0364 17.7371 40.2878Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.544 34.868C11.1864 34.8842 10.9914 34.4669 10.7095 34.2757C9.72044 34.0348 8.97848 33.8665 8.61588 32.9104C8.65375 32.8185 8.70032 32.7322 8.74751 32.6459C9.24918 32.4335 10.1936 32.2764 10.8312 32.2261C12.0556 32.4459 11.7023 33.9833 11.544 34.868Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.87468 32.0928C8.67289 32.2567 8.63005 32.2207 8.53257 32.217C8.39411 31.9922 8.33637 31.8239 8.10974 31.7376C7.02815 31.7575 5.87702 30.9932 6.03411 29.8837C6.22348 29.6508 6.43831 29.7806 6.85555 29.8837C7.75832 29.6663 9.09385 29.0436 9.20996 30.5033C9.13173 31.0385 8.99078 31.5837 8.87468 32.0928Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M70.6276 29.3797C70.1644 28.5136 71.3745 27.5382 71.9246 27.2054C72.7187 27.3743 72.7224 28.6527 72.1922 29.2624C71.4453 29.7721 71.359 29.8709 70.6276 29.3797Z\" />"
    + "  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M69.2484 38.0126C69.2372 37.9748 69.2353 37.9443 69.2266 37.9214C68.3189 37.1328 67.5837 36.2474 67.0858 35.2205C67.1175 35.1174 67.1175 35.1174 67.21 35.01C67.9203 35.1925 68.4884 35.8892 69.2993 35.7545C69.719 35.4384 70.0717 35.1665 70.3492 34.8138C69.4501 34.0321 68.407 34.1824 67.4943 33.7657C66.8846 33.2355 66.3743 31.7062 66.6561 31.0823C67.3869 30.3415 67.2118 30.8264 68.0525 31.5579C69.1589 32.3172 70.6348 32.7022 71.9399 33.2001C72.2764 33.2461 72.2764 33.2461 72.4279 33.305C73.2357 32.8928 73.4853 32.922 74.249 33.4255C74.6215 33.5466 74.6215 33.5466 75.7876 33.8222C75.877 33.7695 75.9658 33.7167 76.0632 33.6714C74.8264 32.7115 73.0463 32.7276 71.5779 32.4507C71.0216 32.1409 70.7615 31.7404 70.5913 31.3033C70.3709 31.14 69.077 30.2472 70.0431 30.3341C70.4982 30.5272 70.9794 30.5396 71.4805 30.7296C72.8619 30.9897 74.2962 31.4548 75.7013 31.8217C75.8304 31.6733 75.8521 31.5479 75.8639 31.4846C76.0527 31.3008 76.18 31.2381 76.3743 31.1468C76.1502 31.0388 76.1148 30.9786 75.9589 31.0754C75.1952 30.7879 74.493 31.0462 74.5501 30.0969C73.9702 30.4471 73.3195 30.4465 72.8247 30.0162C72.5894 29.3046 73.3617 28.4993 73.6399 28.0455C73.6498 27.9679 73.887 27.5941 74.1087 27.1067C74.3266 26.456 74.4123 25.5743 75.0686 25.4359C75.6119 25.5607 75.8254 25.6153 75.6597 26.3554C75.7211 26.7845 75.7801 27.604 75.7025 27.9722C75.5777 28.5645 75.3616 29.4121 74.814 29.892C75.2083 29.9882 75.8478 30.0522 75.9757 29.5555C75.7845 28.9253 76.3942 28.7744 76.822 28.9153C77.0151 29.1264 77.0151 29.1264 77.3019 29.3624C77.395 29.255 77.387 29.2475 77.3944 29.1389C77.169 28.6825 77.3149 28.6639 77.6813 28.4764C77.4267 27.9362 77.6893 27.3681 78.1358 27.2209C79.5818 28.0728 79.5818 28.0728 80.2965 28.4329C81.103 28.3385 82.7092 27.4898 83.1836 28.4099C83.147 28.8849 82.87 29.4698 82.4019 29.8585C82.13 29.9547 81.853 29.9901 81.6171 30.1615C81.691 30.226 81.7587 30.2987 81.8251 30.3713C82.5466 30.6079 83.0538 30.5408 82.6279 31.5473C82.8477 32.2595 83.0799 32.36 82.2318 32.8686C81.2185 33.2181 80.1288 33.5888 79.0739 33.903C79.0367 33.9284 79 33.9545 78.9715 33.9874C79.0404 34.0911 79.1099 34.1948 79.172 34.3065C78.9181 34.6654 78.5499 35.0553 78.173 35.4223C77.4553 35.5651 77.0889 35.2037 76.5655 34.807C75.6851 34.5195 74.9146 34.2401 74.0317 34.0228C73.923 34.1314 73.7976 34.2252 73.7107 34.4245C74.0006 34.6915 74.2918 34.9728 74.5824 35.2546C74.696 35.7737 74.0994 36.3269 73.5673 36.4722C73.1991 36.1959 72.9638 36.0494 72.5844 35.937C72.4 36.0655 72.215 36.1947 72.0237 36.3325C71.4451 36.9689 70.3001 38.7682 69.2484 38.0126ZM78.5338 32.2129C78.5232 32.1744 78.5139 32.152 78.5046 32.1297C79.0081 31.6839 79.1584 31.5107 78.6374 31.1443C78.4928 31.1779 78.2183 31.2437 78.2128 31.0655C78.2065 30.8736 79.1304 30.6607 79.2714 30.5812C79.5352 30.8103 79.9221 31.248 79.9537 31.6957C79.588 32.1154 79.1062 32.2036 78.5338 32.2129Z\" />"
    + "</svg>",
)

#let project(
  theme: "project",
  block_theme: "default",
  course: "<course>",
  title: "<title>",
  title_size: 3em,
  cover_image_padding: 1em,
  cover_image_size: none,
  semester: "<semester>",
  name: none,
  author: none,
  school_id: none,
  date: none,
  college: none,
  place: none,
  teacher: none,
  major: none,
  cover_comments: none,
  cover_comments_size: 1.25em,
  language: none,
  table_of_contents: none,
  font_serif: (
    "New Computer Modern",
    "Georgia",
    "Nimbus Roman No9 L",
    "Songti SC",
    "Noto Serif CJK SC",
    "Source Han Serif SC",
    "Source Han Serif CN",
    "STSong",
    "AR PL New Sung",
    "AR PL SungtiL GB",
    "NSimSun",
    "SimSun",
    "TW\-Sung",
    "WenQuanYi Bitmap Song",
    "AR PL UMing CN",
    "AR PL UMing HK",
    "AR PL UMing TW",
    "AR PL UMing TW MBE",
    "PMingLiU",
    "MingLiU",
  ),
  font_sans_serif: (
    "Noto Sans",
    "Helvetica Neue",
    "Helvetica",
    "Nimbus Sans L",
    "Arial",
    "Liberation Sans",
    "PingFang SC",
    "Hiragino Sans GB",
    "Noto Sans CJK SC",
    "Source Han Sans SC",
    "Source Han Sans CN",
    "Microsoft YaHei",
    "Wenquanyi Micro Hei",
    "WenQuanYi Zen Hei",
    "ST Heiti",
    "SimHei",
    "WenQuanYi Zen Hei Sharp",
  ),
  font_mono: ("Consolas", "Monaco"),
  body,
) = {
  font_mono = (..font_mono, ..font_sans_serif)
  if (theme == "lab") {
    if (cover_image_size == none) {
      cover_image_size = 48%
    }
  } else if (theme == "project") {
    if (cover_image_size == none) {
      cover_image_size = 50%
    }
    if (language == none) {
      language = "en"
    }
    if (table_of_contents == none) {
      table_of_contents = true
    }
  }
  // fallback
  if (language == none) {
    language = "cn"
  }
  if (table_of_contents == none) {
    table_of_contents = false
  }

  set document(author: (author), title: title)

  set page(numbering: "1", number-align: center)

  set text(font: font_serif, lang: language, size: 12pt)
  show raw: set text(font: font_mono)
  show math.equation: set text(weight: 400)

  set par(spacing: 1.2em, leading: 0.75em)

  // Update global state
  state_course.update(course)
  state_author.update(author)
  state_school_id.update(school_id)
  state_date.update(date)
  state_theme.update(theme)
  state_block_theme.update(block_theme)

  // Cover Page
  if (theme == "lab") {
    v(1fr)
    {
      set align(center)
      block(width: cover_image_size, asset-zju-banner)
      text(size: 26pt, fakebold[本科实验报告])
    }
    v(2fr)
    let rows = ()
    if (course != none) {
      rows.push("课程名称")
      rows.push(course)
    }
    if (name != none) {
      rows.push("实验名称")
      rows.push(name)
    }
    if (author != none) {
      rows.push([姓$space.quad space.quad$名])
      rows.push(author)
    }
    if (school_id != none) {
      rows.push([学$space.quad space.quad$号])
      rows.push(school_id)
    }
    if (college != none) {
      rows.push([学$space.quad space.quad$院])
      rows.push(college)
    }
    if (major != none) {
      rows.push([专$space.quad space.quad$业])
      rows.push(major)
    }
    if (place != none) {
      rows.push([实验地点])
      rows.push(place)
    }
    if (teacher != none) {
      rows.push([指导教师])
      rows.push(teacher)
    }
    if (date != none) {
      rows.push([报告日期])
      rows.push(date)
    }
    align(
      center,
      box(width: 75%)[
        #set text(size: 1.2em)
        #tablex(
          columns: (6.5em + 5pt, 1fr),
          align: center + horizon,
          stroke: 0pt,
          // stroke: 0.5pt + red, // this line is just for testing
          inset: 1pt,
          map-cells: cell => {
            if (cell.x == 0) {
              _underlined_cell([#cell.content#"："], color: white)
            } else {
              _underlined_cell(cell.content, color: black)
            }
          },
          ..rows,
        )
      ],
    )
    v(2fr)
    pagebreak()
  } else if (theme == "project") {
    v(1fr)
    box(
      width: 100%,
      {
        set align(center)
        par(text(size: 2em, weight: 900, course))
        par(text(size: title_size, weight: 700, title))

        v(cover_image_padding)
        block(width: cover_image_size, asset-zju-logo)
        v(cover_image_padding)

        if cover_comments == none {
          text(cover_comments_size)[
            #v(1em)
            #if (author != none) [
              Author: #author
            ]

            Date: #date

            #semester Semester
          ]
        } else {
          // If cover_comments is assigned, it will be used as the cover's original comments
          cover_comments
        }
      },
    )
    v(4fr)
    pagebreak()
  } else if (theme == "nocover") {
    // no cover page
  } else {
    set text(fill: red, size: 3em, weight: 900)
    align(center)[Theme not found!]
    pagebreak()
  }

  if (table_of_contents) {
    outline(title: text(1.1em, "Table of Contents"), depth: 3, indent: 1.2em)
    pagebreak()
  }

  set par(justify: true)
  set table(align: center + horizon, stroke: 0.5pt)

  if (theme == "lab") {
    set heading(
      numbering: (..args) => {
        let nums = args.pos()
        if nums.len() == 1 {
          return none
        } else if nums.len() == 2 {
          return numbering("一、", ..nums.slice(1))
        } else {
          return numbering("1.1)", ..nums.slice(1))
        }
      },
    )

    show heading.where(level: 1): it => block(
      width: 100%,
      {
        set align(center)
        set text(size: 1.2em)
        it.body
        v(0.6em)
      },
    )

    body
  } else {
    set heading(
      numbering: (..args) => {
        let nums = args.pos()
        if nums.len() == 1 {
          return none
        } else {
          return numbering("1.1)", ..nums)
        }
      },
    )

    body
  }
}

#let codex(code, lang: none, size: 1em, border: true) = {
  if code.len() > 0 {
    if code.ends-with("\n") {
      code = code.slice(0, code.len() - 1)
    }
  } else {
    code = "// no code"
  }
  set text(size: size)
  align(left)[
    #if border == true {
      block(width: 100%, stroke: 0.5pt + luma(150), radius: 4pt, inset: 8pt)[
        #raw(lang: lang, block: true, code)
      ]
    } else {
      raw(lang: lang, block: true, code)
    }
  ]
}

#let importCode(file, namespace: none, lang: "cpp") = {
  let source_code = read(file)
  let code = ""
  let note = ""
  let flag = false
  let firstlines = true

  for line in source_code.split("\n") {
    if namespace != none and line == ("} // namespace " + namespace) {
      flag = false
    }
    if namespace == none or flag {
      if firstlines and line.starts-with("// ") {
        note += line.slice(3) + "\n"
      } else {
        code += line + "\n"
        firstlines = false
      }
    }
    if namespace != none and line == ("namespace " + namespace + " {") {
      flag = true
    }
  }

  if note.len() > 0 {
    block(note)
  }

  codex(code, lang: lang, size: 1.05em)
}

#let lab_header(
  course: none,
  type: "综合",
  name: "<name>",
  author: none,
  school_id: none,
  place: "<place>",
  date: none,
) = {
  pagebreak(weak: true)
  align(center)[
    #set text(size: 1.5em)
    #fakebold[浙江大学实验报告]
  ]
  tablex(
    columns: (1fr, 0.32fr, 1.68fr, 1fr, 1fr, 1fr),
    align: center + horizon,
    stroke: 0pt,
    inset: 1pt,
    _underlined_cell("课程名称：", color: white),
    colspanx(
      2,
      _underlined_cell(if course == none {
        context state_course.get()
      } else {
        course
      }),
    ),
    (),
    _underlined_cell("实验类型：", color: white),
    colspanx(2, _underlined_cell(type)),
    (),
    colspanx(2, _underlined_cell("实验项目名称：", color: white)),
    (),
    colspanx(4, _underlined_cell(name)),
    (),
    (),
    (),
    _underlined_cell("学生姓名：", color: white),
    colspanx(
      2,
      _underlined_cell(if author == none {
        context state_author.get()
      } else {
        author
      }),
    ),
    (),
    _underlined_cell([学$space.quad space.quad$号：], color: white),
    colspanx(
      2,
      _underlined_cell(if school_id == none {
        context state_school_id.get()
      } else {
        school_id
      }),
    ),
    (),
    _underlined_cell("实验地点：", color: white),
    colspanx(2, _underlined_cell(place)),
    (),
    _underlined_cell("实验日期：", color: white),
    colspanx(
      2,
      _underlined_cell(if date == none {
        context state_date.get()
      } else {
        date
      }),
    ),
    (),
  )
}

#let lab_header_2(
  major: none,
  author: none,
  school_id: none,
  date: none,
  course: none,
  teacher: none,
  grade: none,
  name: none,
) = {
  align(center)[
    #grid(
      columns: 3,
      column-gutter: (-15pt, 20pt),
      [
        #block(width: 75%, asset-zju-banner)
      ],
      [
        #text(size: -10pt)[] \ #text(size: 30pt, stroke: 1pt)[实验报告]
      ],
      [
        #align(left)[
          #text(size: 1em)[
            专业：#major\
            姓名：#author \
            学号：#school_id \
            日期：#date\
          ]
        ]
      ],
    )
  ]

  tablex(
    columns: (1.3fr, 2fr, 1.3fr, 1fr, 1fr, 0.5fr),
    align: left,
    stroke: 0pt,
    inset: 1pt,
    _underlined_cell("课程名称：", color: white),
    colspanx(
      1,
      _underlined_cell(if course == none {
        context state_course.get()
      } else {
        course
      }),
    ),
    _underlined_cell("指导老师：", color: white),
    colspanx(1, _underlined_cell(teacher)),
    _underlined_cell("成绩：", color: white),
    colspanx(1, _underlined_cell(grade)),
    _underlined_cell("实验名称：", color: white),
    colspanx(4, _underlined_cell(name)),
    (),
    (),
    (),
  )
}

#let table3(
  // 三线表
  ..args,
  inset: 0.5em,
  stroke: 0.5pt,
  align: center + horizon,
  columns: 1fr,
) = {
  tablex(
    columns: 1fr,
    inset: 0pt,
    stroke: 0pt,
    map-hlines: h => {
      if (h.y > 0) {
        (..h, stroke: (stroke * 2) + black)
      } else {
        h
      }
    },
    tablex(
      ..args,
      inset: inset,
      stroke: stroke,
      align: align,
      columns: columns,
      map-hlines: h => {
        if (h.y == 0) {
          (..h, stroke: (stroke * 2) + black)
        } else if (h.y == 1) {
          (..h, stroke: stroke + black)
        } else {
          (..h, stroke: 0pt)
        }
      },
      auto-vlines: false,
    ),
  )
}

#let figurex(img, caption) = {
  show figure.caption: it => {
    set text(size: 0.9em, fill: luma(100), weight: 700)
    it
    v(0.1em)
  }
  set figure.caption(separator: ":")
  figure(
    img,
    caption: [
      #set text(weight: 400)
      #caption
    ],
  )
}

#let blockx(it, name: "", color: red, theme: none) = {
  context {
    let _theme = theme
    if (_theme == none) {
      _theme = state_block_theme.get()
    }
    if (_theme == "default") {
      let _inset = 0.8em
      let _color = color.darken(5%)
      v(0.2em)
      block(below: 1em, stroke: 0.5pt + _color, radius: 3pt, width: 100%, inset: _inset)[
        #place(
          top + left,
          dy: -6pt - _inset, // Account for inset of block
          dx: 8pt - _inset,
          block(fill: white, inset: 2pt)[
            #set text(font: "Noto Sans", fill: _color)
            #name
          ],
        )
        #set text(fill: _color)
        #set par(first-line-indent: 0em)
        #it
      ]
    } else if (_theme == "boxed") {
      showybox(
        title: name,
        frame: (
          border-color: color,
          title-color: color.lighten(20%),
          body-color: color.lighten(95%),
          footer-color: color.lighten(80%),
        ),
        it,
      )
    } else if (_theme == "float") {
      showybox(
        title-style: (
          boxed-style: (anchor: (x: center, y: horizon), radius: (top-left: 10pt, bottom-right: 10pt, rest: 0pt)),
        ),
        frame: (
          title-color: color.darken(5%),
          body-color: color.lighten(95%),
          footer-color: color.lighten(60%),
          border-color: color.darken(20%),
          radius: (top-left: 10pt, bottom-right: 10pt, rest: 0pt),
        ),
        title: name,
        [
          #it
          #v(0.25em)
        ],
      )
    } else if (_theme == "thickness") {
      showybox(
        title-style: (color: color.darken(20%), sep-thickness: 0pt, align: center),
        frame: (title-color: color.lighten(85%), border-color: color.darken(20%), thickness: (left: 1pt), radius: 0pt),
        title: name,
        it,
      )
    } else if (_theme == "dashed") {
      showybox(
        title: name,
        frame: (
          border-color: color,
          title-color: color,
          radius: 0pt,
          thickness: 1pt,
          body-inset: 1em,
          dash: "densely-dash-dotted",
        ),
        it,
      )
    } else {
      block(
        width: 100%,
        stroke: 0.5pt + red,
        inset: 1em,
        radius: 5pt,
        align(center)[
          #set text(fill: red, size: 1.5em)
          Unknown block theme!
        ],
      )
    }
  }
}

#let example(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Example")
  },
  color: gray.darken(60%),
)
#let proof(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Proof")
  },
  color: rgb(120, 120, 120),
)
#let abstract(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Abstract")
  },
  color: rgb(0, 133, 143),
)
#let summary(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Summary")
  },
  color: rgb(0, 133, 143),
)
#let info(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Info")
  },
  color: rgb(68, 115, 218),
)
#let note(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Note")
  },
  color: rgb(68, 115, 218),
)
#let tip(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Tip")
  },
  color: rgb(0, 133, 91),
)
#let hint(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Hint")
  },
  color: rgb(0, 133, 91),
)
#let success(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Success")
  },
  color: rgb(62, 138, 0),
)
#let important(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Important")
  },
  color: rgb(62, 138, 0),
)
#let help(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Help")
  },
  color: rgb(153, 110, 36),
)
#let warning(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Warning")
  },
  color: rgb(184, 95, 0),
)
#let attention(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Attention")
  },
  color: rgb(216, 58, 49),
)
#let caution(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Caution")
  },
  color: rgb(216, 58, 49),
)
#let failure(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Failure")
  },
  color: rgb(216, 58, 49),
)
#let danger(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Danger")
  },
  color: rgb(216, 58, 49),
)
#let error(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Error")
  },
  color: rgb(216, 58, 49),
)
#let bug(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Bug")
  },
  color: rgb(204, 51, 153),
)
#let quote(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Quote")
  },
  color: rgb(132, 90, 231),
)
#let cite(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Cite")
  },
  color: rgb(132, 90, 231),
)
#let experiment(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Experiment")
  },
  color: rgb(132, 90, 231),
)
#let question(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Question")
  },
  color: rgb(132, 90, 231),
)
#let analysis(it, name: none) = blockx(
  it,
  name: if (name != none) {
    name
  } else {
    strong("Analysis")
  },
  color: rgb(0, 133, 91),
)
